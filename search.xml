<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GoLand 类图生成工具 plantuml</title>
      <link href="/2020/06/29/plantuml/"/>
      <url>/2020/06/29/plantuml/</url>
      
        <content type="html"><![CDATA[<h2 id="克隆项目"><a href="#克隆项目" class="headerlink" title="克隆项目"></a>克隆项目</h2><p>在gopath路径下</p><pre><code>git clone git.oschina.net/jscode/go-package-plantuml</code></pre><h2 id="进入项目"><a href="#进入项目" class="headerlink" title="进入项目"></a>进入项目</h2><pre><code>go build</code></pre><p>在 GOPATH/bin 生成一个 二进制文件 plantuml</p><h2 id="用GoLand打开项目，终端输入生成类图命令"><a href="#用GoLand打开项目，终端输入生成类图命令" class="headerlink" title="用GoLand打开项目，终端输入生成类图命令"></a>用GoLand打开项目，终端输入生成类图命令</h2><pre><code>~/go/bin/go-package-plantuml --codedir /Users/xiongweigang/go/src/github.com/wasabi/backEnd --gopath /Users/xiongweigang/go --outputfile /tmp/uml.txt --ignoredir /Users/xiongweigang/go/src/github.com/wasabi/backEnd/vendor</code></pre><h2 id="生成png图片"><a href="#生成png图片" class="headerlink" title="生成png图片"></a>生成png图片</h2><pre><code>java -jar ～/plantuml.jar -verbose -graphvizdot /usr/local/bin/dot /tmp/uml.txt</code></pre><h2 id="生成svg图片-后边加上-tsvg"><a href="#生成svg图片-后边加上-tsvg" class="headerlink" title="生成svg图片 后边加上 -tsvg"></a>生成svg图片 后边加上 -tsvg</h2><pre><code>java -jar ～/plantuml.jar -verbose -graphvizdot /usr/local/bin/dot /tmp/uml.txt -tsvg</code></pre><p>生成后用浏览器打开</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/dwjpeng2/article/details/81667214" target="_blank" rel="noopener">https://blog.csdn.net/dwjpeng2/article/details/81667214</a></p><p><a href="https://yougg.github.io/2017/11/25/goland%E4%B8%AD%E4%BD%BF%E7%94%A8plantuml%E7%94%9F%E6%88%90go-uml%E5%9B%BE/" target="_blank" rel="noopener">https://yougg.github.io/2017/11/25/goland%E4%B8%AD%E4%BD%BF%E7%94%A8plantuml%E7%94%9F%E6%88%90go-uml%E5%9B%BE/</a></p><p><a href="https://juejin.im/post/5da9c00de51d4524cd3b3942" target="_blank" rel="noopener">https://juejin.im/post/5da9c00de51d4524cd3b3942</a></p><p><a href="https://studygolang.com/articles/9719" target="_blank" rel="noopener">https://studygolang.com/articles/9719</a></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fabric多机部署（raft共识）</title>
      <link href="/2020/02/16/sort-algorithms/"/>
      <url>/2020/02/16/sort-algorithms/</url>
      
        <content type="html"><![CDATA[<h1 id="fabric多机部署-（raft共识）"><a href="#fabric多机部署-（raft共识）" class="headerlink" title="fabric多机部署 （raft共识）"></a>fabric多机部署 （raft共识）</h1><h2 id="0-准备工作"><a href="#0-准备工作" class="headerlink" title="0. 准备工作"></a>0. 准备工作</h2><h4 id="克隆项目"><a href="#克隆项目" class="headerlink" title="克隆项目"></a>克隆项目</h4><pre><code>git clone git@192.168.9.251:jilg/deployFabric_Raft.git</code></pre><h4 id="节点分配"><a href="#节点分配" class="headerlink" title="节点分配"></a>节点分配</h4><table><thead><tr><th>主机1</th><th>主机 2</th></tr></thead><tbody><tr><td>Org1 peer0 1</td><td>Org2 peer 0 1</td></tr><tr><td>Orderer 0 1 2</td><td>Orderer 0 1</td></tr></tbody></table><br>下面的步骤先在一台主机上操作<h2 id="1-修改证书，创始区块配置文件"><a href="#1-修改证书，创始区块配置文件" class="headerlink" title="1. 修改证书，创始区块配置文件"></a>1. 修改证书，创始区块配置文件</h2><p>先删除原有配置</p><pre><code>rm -rf crypto-configrm -rf channel-artifacts</code></pre><h4 id="crypto-config-yaml"><a href="#crypto-config-yaml" class="headerlink" title="crypto-config.yaml"></a>crypto-config.yaml</h4><pre><code>PeerOrgs:  - Name: Org1    Domain: org1.example.com    EnableNodeOUs: true    Template:      Count: 2    Users:      Count: 1    Specs:      - Hostname: orderer0      - Hostname: orderer1      - Hostname: orderer2  - Name: Org2    Domain: org2.example.com    EnableNodeOUs: true    Template:      Count: 2    Users:      Count: 1    Specs:      - Hostname: orderer0      - Hostname: orderer1</code></pre><h4 id="configtx-yaml"><a href="#configtx-yaml" class="headerlink" title="configtx.yaml"></a>configtx.yaml</h4><pre><code>SampleMultiNodeEtcdRaft:        &lt;&lt;: *ChannelDefaults        Capabilities:            &lt;&lt;: *ChannelCapabilities        Orderer:            &lt;&lt;: *OrdererDefaults            OrdererType: etcdraft            EtcdRaft:                Consenters:                - Host: orderer0.org1.example.com                  Port: 7050                  ClientTLSCert: crypto-config/peerOrganizations/org1.example.com/peers/orderer0.org1.example.com/tls/server.crt                  ServerTLSCert: crypto-config/peerOrganizations/org1.example.com/peers/orderer0.org1.example.com/tls/server.crt                - Host: orderer1.org1.example.com                  Port: 8050                  ClientTLSCert: crypto-config/peerOrganizations/org1.example.com/peers/orderer1.org1.example.com/tls/server.crt                  ServerTLSCert: crypto-config/peerOrganizations/org1.example.com/peers/orderer1.org1.example.com/tls/server.crt                - Host: orderer2.org1.example.com                  Port: 9050                  ClientTLSCert: crypto-config/peerOrganizations/org1.example.com/peers/orderer2.org1.example.com/tls/server.crt                  ServerTLSCert: crypto-config/peerOrganizations/org1.example.com/peers/orderer2.org1.example.com/tls/server.crt                - Host: orderer0.org2.example.com                  Port: 7050                  ClientTLSCert: crypto-config/peerOrganizations/org2.example.com/peers/orderer0.org2.example.com/tls/server.crt                  ServerTLSCert: crypto-config/peerOrganizations/org2.example.com/peers/orderer0.org2.example.com/tls/server.crt                - Host: orderer1.org2.example.com                  Port: 8050                  ClientTLSCert: crypto-config/peerOrganizations/org2.example.com/peers/orderer1.org2.example.com/tls/server.crt                  ServerTLSCert: crypto-config/peerOrganizations/org2.example.com/peers/orderer1.org2.example.com/tls/server.crt            Addresses:                - orderer0.org1.example.com:7050                - orderer1.org1.example.com:8050                - orderer2.org1.example.com:9050                - orderer0.org2.example.com:7050                - orderer1.org2.example.com:8050            Organizations:            - *Org1            - *Org2            Capabilities:                &lt;&lt;: *OrdererCapabilities        Application:            &lt;&lt;: *ApplicationDefaults            Organizations:            - &lt;&lt;: *Org1            - &lt;&lt;: *Org2        Consortiums:            SampleConsortium:                Organizations:                - *Org1                - *Org2</code></pre><p>1、生成公私钥和证书</p><pre><code>../bin/cryptogen generate --config=./crypto-config.yaml </code></pre><p>2、生成创世区块</p><pre><code>../bin/configtxgen -profile SampleMultiNodeEtcdRaft -outputBlock ./channel-artifacts/genesis.block</code></pre><p>3、生成Channel配置区块</p><pre><code>../bin/configtxgen -profile TwoOrgsChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID mychannel </code></pre><p>4、更新锚节点</p><pre><code>../bin/configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org1MSPanchors.tx -channelID mychannel -asOrg Org1MSP../bin/configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org2MSPanchors.tx -channelID mychannel -asOrg Org2MSP</code></pre><h2 id="3-修改peer配置"><a href="#3-修改peer配置" class="headerlink" title="3. 修改peer配置"></a>3. 修改peer配置</h2><h4 id="docker-compose-base-yaml"><a href="#docker-compose-base-yaml" class="headerlink" title="docker-compose-base.yaml"></a>docker-compose-base.yaml</h4><pre><code># Copyright IBM Corp. All Rights Reserved.## SPDX-License-Identifier: Apache-2.0#version: &#39;2&#39;services:  orderer.example.com:    container_name: orderer.example.com    extends:      file: peer-base.yaml      service: orderer-base    volumes:        - ../channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block        - ../crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp:/var/hyperledger/orderer/msp        - ../crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/:/var/hyperledger/orderer/tls    ports:      - 7050:7050  peer0.org1.example.com:    container_name: peer0.org1.example.com    extends:      file: peer-base.yaml      service: peer-base    environment:      - CORE_PEER_ID=peer0.org1.example.com      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051      - CORE_PEER_CHAINCODEADDRESS=peer0.org1.example.com:7052      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052      - CORE_PEER_GOSSIP_BOOTSTRAP=peer1.org1.example.com:8051      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com:7051      - CORE_PEER_LOCALMSPID=Org1MSP      - CORE_PEER_ENBLKROUTER=true    volumes:        - /var/run/:/host/var/run/        - ../crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp:/etc/hyperledger/fabric/msp        - ../crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls:/etc/hyperledger/fabric/tls        - peer0.org1.example.com:/var/hyperledger/production    ports:      - 7051:7051      - 9099:9099  peer1.org1.example.com:    container_name: peer1.org1.example.com    extends:      file: peer-base.yaml      service: peer-base    environment:      - CORE_PEER_ID=peer1.org1.example.com      - CORE_PEER_ADDRESS=peer1.org1.example.com:8051      - CORE_PEER_LISTENADDRESS=0.0.0.0:8051      - CORE_PEER_CHAINCODEADDRESS=peer1.org1.example.com:8052      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:8052      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org1.example.com:8051      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051      - CORE_PEER_LOCALMSPID=Org1MSP      - CORE_PEER_ENBLKROUTER=true    volumes:        - /var/run/:/host/var/run/        - ../crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/msp:/etc/hyperledger/fabric/msp        - ../crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls:/etc/hyperledger/fabric/tls        - peer1.org1.example.com:/var/hyperledger/production    ports:      - 8051:8051      - 10099:9099  peer0.org2.example.com:    container_name: peer0.org2.example.com    extends:      file: peer-base.yaml      service: peer-base    environment:      - CORE_PEER_ID=peer0.org2.example.com      - CORE_PEER_ADDRESS=peer0.org2.example.com:9051      - CORE_PEER_LISTENADDRESS=0.0.0.0:9051      - CORE_PEER_CHAINCODEADDRESS=peer0.org2.example.com:9052      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:9052      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org2.example.com:9051      - CORE_PEER_GOSSIP_BOOTSTRAP=peer1.org2.example.com:10051      - CORE_PEER_LOCALMSPID=Org2MSP      - CORE_PEER_ENBLKROUTER=true    volumes:        - /var/run/:/host/var/run/        - ../crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/msp:/etc/hyperledger/fabric/msp        - ../crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls:/etc/hyperledger/fabric/tls        - peer0.org2.example.com:/var/hyperledger/production    ports:      - 9051:9051      - 9099:9099  peer1.org2.example.com:    container_name: peer1.org2.example.com    extends:      file: peer-base.yaml      service: peer-base    environment:      - CORE_PEER_ID=peer1.org2.example.com      - CORE_PEER_ADDRESS=peer1.org2.example.com:10051      - CORE_PEER_LISTENADDRESS=0.0.0.0:10051      - CORE_PEER_CHAINCODEADDRESS=peer1.org2.example.com:10052      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:10052      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org2.example.com:10051      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org2.example.com:9051      - CORE_PEER_LOCALMSPID=Org2MSP      - CORE_PEER_ENBLKROUTER=true    volumes:        - /var/run/:/host/var/run/        - ../crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/msp:/etc/hyperledger/fabric/msp        - ../crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls:/etc/hyperledger/fabric/tls        - peer1.org2.example.com:/var/hyperledger/production    ports:      - 10051:10051      - 10099:9099</code></pre><h2 id="4-修改组织1配置"><a href="#4-修改组织1配置" class="headerlink" title="4. 修改组织1配置"></a>4. 修改组织1配置</h2><h4 id="docker-compose-org1-35-yaml"><a href="#docker-compose-org1-35-yaml" class="headerlink" title="docker-compose-org1-35.yaml"></a>docker-compose-org1-35.yaml</h4><pre><code>version: &#39;2&#39;volumes:  orderer0.org1.example.com:  orderer1.org1.example.com:  orderer2.org1.example.com:  peer0.org1.example.com:  peer1.org1.example.com:networks:  byfn:services:  orderer0.org1.example.com:    environment:      - ORDERER_GENERAL_LOCALMSPID=Org1MSP    extends:      file: base/peer-base.yaml      service: orderer-base    container_name: orderer0.org1.example.com    networks:      - byfn    volumes:      - ./channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block      - ./crypto-config/peerOrganizations/org1.example.com/peers/orderer0.org1.example.com/msp:/var/hyperledger/orderer/msp      - ./crypto-config/peerOrganizations/org1.example.com/peers/orderer0.org1.example.com/tls/:/var/hyperledger/orderer/tls      - orderer0.org1.example.com:/var/hyperledger/production/orderer    ports:      - 7050:7050    extra_hosts:      - orderer0.org1.example.com:192.168.9.35      - orderer1.org1.example.com:192.168.9.35      - orderer2.org1.example.com:192.168.9.35      - orderer0.org2.example.com:192.168.9.28      - orderer1.org2.example.com:192.168.9.28  orderer1.org1.example.com:    environment:      - ORDERER_GENERAL_LOCALMSPID=Org1MSP    extends:      file: base/peer-base.yaml      service: orderer-base    container_name: orderer1.org1.example.com    networks:      - byfn    volumes:      - ./channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block      - ./crypto-config/peerOrganizations/org1.example.com/peers/orderer1.org1.example.com/msp:/var/hyperledger/orderer/msp      - ./crypto-config/peerOrganizations/org1.example.com/peers/orderer1.org1.example.com/tls/:/var/hyperledger/orderer/tls      - orderer1.org1.example.com:/var/hyperledger/production/orderer    ports:      - 8050:7050    extra_hosts:      - orderer0.org1.example.com:192.168.9.35      - orderer1.org1.example.com:192.168.9.35      - orderer2.org1.example.com:192.168.9.35      - orderer0.org2.example.com:192.168.9.28      - orderer1.org2.example.com:192.168.9.28  orderer2.org1.example.com:    environment:      - ORDERER_GENERAL_LOCALMSPID=Org1MSP    extends:      file: base/peer-base.yaml      service: orderer-base    container_name: orderer2.org1.example.com    networks:      - byfn    volumes:      - ./channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block      - ./crypto-config/peerOrganizations/org1.example.com/peers/orderer2.org1.example.com/msp:/var/hyperledger/orderer/msp      - ./crypto-config/peerOrganizations/org1.example.com/peers/orderer2.org1.example.com/tls/:/var/hyperledger/orderer/tls      - orderer2.org1.example.com:/var/hyperledger/production/orderer    ports:      - 9050:7050    extra_hosts:      - orderer0.org1.example.com:192.168.9.35      - orderer1.org1.example.com:192.168.9.35      - orderer2.org1.example.com:192.168.9.35      - orderer0.org2.example.com:192.168.9.28      - orderer1.org2.example.com:192.168.9.28  peer0.org1.example.com:    container_name: peer0.org1.example.com    extends:      file:  base/docker-compose-base.yaml      service: peer0.org1.example.com    networks:      - byfn    extra_hosts:      - orderer0.org1.example.com:192.168.9.35      - orderer1.org1.example.com:192.168.9.35      - orderer2.org1.example.com:192.168.9.35      - orderer0.org2.example.com:192.168.9.28      - orderer1.org2.example.com:192.168.9.28  peer1.org1.example.com:    container_name: peer1.org1.example.com    extends:      file:  base/docker-compose-base.yaml      service: peer1.org1.example.com    networks:      - byfn    extra_hosts:      - orderer0.org1.example.com:192.168.9.35      - orderer1.org1.example.com:192.168.9.35      - orderer2.org1.example.com:192.168.9.35      - orderer0.org2.example.com:192.168.9.28      - orderer1.org2.example.com:192.168.9.28  cli:    container_name: cli    image: 192.168.9.8:80/fabric1.4performance/hyperledger/fabric-tools:sles12sp3-latest    tty: true    stdin_open: true    environment:      - GOPATH=/opt/gopath      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock      #- FABRIC_LOGGING_SPEC=DEBUG      - FABRIC_LOGGING_SPEC=INFO      - CORE_PEER_BCCSP_DEFAULT=GM      - CORE_PEER_ID=cli      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051      - CORE_PEER_LOCALMSPID=Org1MSP      - CORE_PEER_TLS_ENABLED=true      - CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt      - CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key      - CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer    command: /bin/bash    volumes:      - /var/run/:/host/var/run/      - ./../chaincode/:/opt/gopath/src/github.com/chaincode      - ./../unionbank/:/opt/gopath/src/unionbank      - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/      - ./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/      - ./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts    extra_hosts:      - orderer0.org1.example.com:192.168.9.35      - orderer1.org1.example.com:192.168.9.35      - orderer2.org1.example.com:192.168.9.35      - orderer0.org2.example.com:192.168.9.28      - orderer1.org2.example.com:192.168.9.28      - peer0.org1.example.com:192.168.9.35      - peer1.org1.example.com:192.168.9.35      - peer0.org2.example.com:192.168.9.28      - peer1.org2.example.com:192.168.9.28    networks:      - byfn</code></pre><h2 id="5-修改组织2配置"><a href="#5-修改组织2配置" class="headerlink" title="5. 修改组织2配置"></a>5. 修改组织2配置</h2><h4 id="docker-compose-org2-28-yaml"><a href="#docker-compose-org2-28-yaml" class="headerlink" title="docker-compose-org2-28.yaml"></a>docker-compose-org2-28.yaml</h4><pre><code>version: &#39;2&#39;volumes:  orderer0.org2.example.com:  orderer1.org2.example.com:  peer0.org2.example.com:  peer1.org2.example.com:networks:  byfn:services:  orderer0.org2.example.com:    environment:      - ORDERER_GENERAL_LOCALMSPID=Org2MSP    extends:      file: base/peer-base.yaml      service: orderer-base    container_name: orderer0.org2.example.com    networks:      - byfn    volumes:      - ./channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block      - ./crypto-config/peerOrganizations/org2.example.com/peers/orderer0.org2.example.com/msp:/var/hyperledger/orderer/msp      - ./crypto-config/peerOrganizations/org2.example.com/peers/orderer0.org2.example.com/tls/:/var/hyperledger/orderer/tls      - orderer0.org2.example.com:/var/hyperledger/production/orderer    ports:      - 7050:7050    extra_hosts:      - orderer0.org1.example.com:192.168.9.35      - orderer1.org1.example.com:192.168.9.35      - orderer2.org1.example.com:192.168.9.35      - orderer0.org2.example.com:192.168.9.28      - orderer1.org2.example.com:192.168.9.28  orderer1.org2.example.com:    environment:      - ORDERER_GENERAL_LOCALMSPID=Org2MSP    extends:      file: base/peer-base.yaml      service: orderer-base    container_name: orderer1.org2.example.com    networks:      - byfn    volumes:      - ./channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block      - ./crypto-config/peerOrganizations/org2.example.com/peers/orderer1.org2.example.com/msp:/var/hyperledger/orderer/msp      - ./crypto-config/peerOrganizations/org2.example.com/peers/orderer1.org2.example.com/tls/:/var/hyperledger/orderer/tls      - orderer1.org2.example.com:/var/hyperledger/production/orderer    ports:      - 8050:7050    extra_hosts:      - orderer0.org1.example.com:192.168.9.35      - orderer1.org1.example.com:192.168.9.35      - orderer2.org1.example.com:192.168.9.35      - orderer0.org2.example.com:192.168.9.28      - orderer1.org2.example.com:192.168.9.28  peer0.org2.example.com:    container_name: peer0.org2.example.com    extends:      file:  base/docker-compose-base.yaml      service: peer0.org2.example.com    networks:      - byfn    extra_hosts:      - orderer0.org1.example.com:192.168.9.35      - orderer1.org1.example.com:192.168.9.35      - orderer2.org1.example.com:192.168.9.35      - orderer0.org2.example.com:192.168.9.28      - orderer1.org2.example.com:192.168.9.28  peer1.org2.example.com:    container_name: peer1.org2.example.com    extends:      file:  base/docker-compose-base.yaml      service: peer1.org2.example.com    networks:      - byfn    extra_hosts:      - orderer0.org1.example.com:192.168.9.35      - orderer1.org1.example.com:192.168.9.35      - orderer2.org1.example.com:192.168.9.35      - orderer0.org2.example.com:192.168.9.28      - orderer1.org2.example.com:192.168.9.28</code></pre><p>以上步骤完成后，将项目拷贝到其他的主机上</p><h2 id="6-启动fabric网络"><a href="#6-启动fabric网络" class="headerlink" title="6. 启动fabric网络"></a>6. 启动fabric网络</h2><p>启动主机1</p><pre><code>docker-compose -f docker-compose-org1-35.yaml up -d</code></pre><p>启动主机2</p><pre><code>docker-compose -f docker-compose-org2-28.yaml up -d</code></pre><p>启动脚本</p><pre><code>#!/bin/bashexport CHANNEL_NAME=mychannelexport ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/orderer0.org1.example.com/msp/tlscacerts/tlsca.org1.example.com-cert.pem## Create channelpeer channel create -o orderer0.org1.example.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/channel.tx --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA## Join all the peers to the channelpeer channel join -b $CHANNEL_NAME.block## Set the anchor peers for each org in the channelpeer channel update -o orderer0.org1.example.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/Org1MSPanchors.tx --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA## Install chaincode on peer0.org1peer chaincode install -n mycc -v 1.0 -p github.com/chaincode/chaincode_example02peer chaincode install -n public -v 1.0 -p unionbank/chaincode/publicpeer chaincode install -n forfeiting -v 1.0 -p unionbank/chaincode/forfeitingsleep 5## pee1.org1export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/mspexport CORE_PEER_ADDRESS=peer1.org1.example.com:8051export CORE_PEER_LOCALMSPID=&quot;Org1MSP&quot;export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crtpeer channel join -b $CHANNEL_NAME.blockpeer chaincode install -n mycc -v 1.0 -p github.com/chaincode/chaincode_example02peer chaincode install -n public -v 1.0 -p unionbank/chaincode/publicpeer chaincode install -n forfeiting -v 1.0 -p unionbank/chaincode/forfeitingsleep 5## peer0.org2export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/mspexport CORE_PEER_ADDRESS=peer0.org2.example.com:9051export CORE_PEER_LOCALMSPID=&quot;Org2MSP&quot;export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crtpeer channel join -b $CHANNEL_NAME.blockpeer channel update -o orderer0.org1.example.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/Org2MSPanchors.tx --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CApeer chaincode install -n mycc -v 1.0 -p github.com/chaincode/chaincode_example02peer chaincode install -n public -v 1.0 -p unionbank/chaincode/publicpeer chaincode install -n forfeiting -v 1.0 -p unionbank/chaincode/forfeitingsleep 5## peer1.org2export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/mspexport CORE_PEER_ADDRESS=peer1.org2.example.com:10051export CORE_PEER_LOCALMSPID=&quot;Org2MSP&quot;export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls/ca.crtpeer channel join -b $CHANNEL_NAME.blockpeer chaincode install -n mycc -v 1.0 -p github.com/chaincode/chaincode_example02peer chaincode install -n public -v 1.0 -p unionbank/chaincode/publicpeer chaincode install -n forfeiting -v 1.0 -p unionbank/chaincode/forfeitingsleep 5# Instantiate chaincode on peer0.org1echo &quot;Instantiating chaincode on peer0.org1...&quot;export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/mspexport CORE_PEER_ADDRESS=peer0.org1.example.com:7051export CORE_PEER_LOCALMSPID=&quot;Org1MSP&quot;export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crtsleep 5peer chaincode instantiate -o orderer0.org1.example.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA -C $CHANNEL_NAME -n mycc -v 1.0 -c &#39;{&quot;Args&quot;:[&quot;init&quot;,&quot;a&quot;, &quot;100&quot;, &quot;b&quot;,&quot;200&quot;]}&#39;sleep 5peer chaincode instantiate -o orderer0.org1.example.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA -C $CHANNEL_NAME -n public -v 1.0 -c &#39;{&quot;Args&quot;:[]}&#39;sleep 5peer chaincode instantiate -o orderer0.org1.example.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA -C $CHANNEL_NAME -n forfeiting -v 1.0 -c &#39;{&quot;Args&quot;:[]}&#39;sleep 5# Query chaincode on peer0.org1peer chaincode query -C $CHANNEL_NAME -n mycc -c &#39;{&quot;Args&quot;:[&quot;query&quot;,&quot;a&quot;]}&#39;# Invoke chaincode on peer0.org1peer chaincode invoke -o orderer0.org1.example.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA -C $CHANNEL_NAME -n mycc  -c &#39;{&quot;Args&quot;:[&quot;invoke&quot;,&quot;a&quot;,&quot;b&quot;,&quot;10&quot;]}&#39;sleep 5# Query chaincode on peer0.org1peer chaincode query -C $CHANNEL_NAME -n mycc -c &#39;{&quot;Args&quot;:[&quot;query&quot;,&quot;a&quot;]}&#39;</code></pre><p>注意清除原有不需要的容器和镜像，否则可能会用老的镜像，就比如某些链码的镜像</p><pre><code>docker rm -f $(docker ps -a|grep  dev|awk &#39;{print $1}&#39;)docker rmi -f $(docker images|grep  dev|awk &#39;{print $1}&#39;)docker volume rm -f $(docker volume ls -q)</code></pre><pre><code>version: &#39;2&#39;volumes:  orderer0.example.com:  orderer1.example.com:  orderer2.example.com:  peer0.org1.example.com:  peer1.org1.example.com:  peer0.org2.example.com:  peer1.org2.example.com:networks:  byfn:services:  orderer0.example.com:    environment:      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP    extends:      file: base/peer-base.yaml      service: orderer-base    container_name: orderer0.example.com    networks:      - byfn    volumes:      - ./channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block      - ./crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/msp:/var/hyperledger/orderer/msp      - ./crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/tls/:/var/hyperledger/orderer/tls      - orderer0.example.com:/var/hyperledger/production/orderer    ports:      - 7050:7050    extra_hosts:      - orderer0.example.com:192.168.9.108      - orderer1.example.com:192.168.9.17      - orderer2.example.com:192.168.9.117      - peer0.org1.example.com:192.168.9.105      - peer1.org1.example.com:192.168.9.13      - peer0.org2.example.com:192.168.9.55      - peer1.org2.example.com:192.168.9.88  orderer1.example.com:    environment:      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP    extends:      file: base/peer-base.yaml      service: orderer-base    container_name: orderer1.example.com    networks:      - byfn    volumes:      - ./channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block      - ./crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/msp:/var/hyperledger/orderer/msp      - ./crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/tls/:/var/hyperledger/orderer/tls      - orderer1.example.com:/var/hyperledger/production/orderer    ports:      - 8050:7050    extra_hosts:      - orderer0.example.com:192.168.9.108      - orderer1.example.com:192.168.9.17      - orderer2.example.com:192.168.9.117      - peer0.org1.example.com:192.168.9.105      - peer1.org1.example.com:192.168.9.13      - peer0.org2.example.com:192.168.9.55      - peer1.org2.example.com:192.168.9.88  orderer2.example.com:    environment:      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP    extends:      file: base/peer-base.yaml      service: orderer-base    container_name: orderer2.example.com    networks:      - byfn    volumes:      - ./channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block      - ./crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/msp:/var/hyperledger/orderer/msp      - ./crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/:/var/hyperledger/orderer/tls      - orderer2.example.com:/var/hyperledger/production/orderer    ports:      - 9050:7050    extra_hosts:      - orderer0.example.com:192.168.9.108      - orderer1.example.com:192.168.9.17      - orderer2.example.com:192.168.9.117      - peer0.org1.example.com:192.168.9.105      - peer1.org1.example.com:192.168.9.13      - peer0.org2.example.com:192.168.9.55      - peer1.org2.example.com:192.168.9.88  peer0.org1.example.com:    container_name: peer0.org1.example.com    extends:      file:  base/docker-compose-base.yaml      service: peer0.org1.example.com    networks:      - byfn    extra_hosts:      - orderer0.example.com:192.168.9.108      - orderer1.example.com:192.168.9.17      - orderer2.example.com:192.168.9.117      - peer0.org1.example.com:192.168.9.105      - peer1.org1.example.com:192.168.9.13      - peer0.org2.example.com:192.168.9.55      - peer1.org2.example.com:192.168.9.88  peer1.org1.example.com:    container_name: peer1.org1.example.com    extends:      file:  base/docker-compose-base.yaml      service: peer1.org1.example.com    networks:      - byfn    extra_hosts:      - orderer0.example.com:192.168.9.108      - orderer1.example.com:192.168.9.17      - orderer2.example.com:192.168.9.117      - peer0.org1.example.com:192.168.9.105      - peer1.org1.example.com:192.168.9.13      - peer0.org2.example.com:192.168.9.55      - peer1.org2.example.com:192.168.9.88peer0.org2.example.com:    container_name: peer0.org2.example.com    extends:      file:  base/docker-compose-base.yaml      service: peer0.org2.example.com    networks:      - byfn    extra_hosts:      - orderer0.example.com:192.168.9.108      - orderer1.example.com:192.168.9.17      - orderer2.example.com:192.168.9.117      - peer0.org1.example.com:192.168.9.105      - peer1.org1.example.com:192.168.9.13      - peer0.org2.example.com:192.168.9.55      - peer1.org2.example.com:192.168.9.88peer1.org2.example.com:    container_name: peer1.org2.example.com    extends:      file:  base/docker-compose-base.yaml      service: peer1.org2.example.com    networks:      - byfn    extra_hosts:      - orderer0.example.com:192.168.9.108      - orderer1.example.com:192.168.9.17      - orderer2.example.com:192.168.9.117      - peer0.org1.example.com:192.168.9.105      - peer1.org1.example.com:192.168.9.13      - peer0.org2.example.com:192.168.9.55      - peer1.org2.example.com:192.168.9.88  cli:    container_name: cli    image: 192.168.9.8:80/fabric1.4performance/hyperledger/fabric-tools:sles12sp3-latest    tty: true    stdin_open: true    environment:      - GOPATH=/opt/gopath      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock      #- FABRIC_LOGGING_SPEC=DEBUG      - FABRIC_LOGGING_SPEC=INFO      #- CORE_PEER_BCCSP_DEFAULT=GM      - CORE_PEER_BCCSP_DEFAULT=SW      - CORE_PEER_ID=cli      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051      - CORE_PEER_LOCALMSPID=Org1MSP      - CORE_PEER_TLS_ENABLED=true      - CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt      - CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key      - CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer    command: /bin/bash    volumes:      - /var/run/:/host/var/run/      - ./../chaincode/:/opt/gopath/src/github.com/chaincode      - ./../unionbank/:/opt/gopath/src/unionbank      - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/      - ./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/      - ./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts    extra_hosts:      - orderer0.example.com:192.168.9.108      - orderer1.example.com:192.168.9.17      - orderer2.example.com:192.168.9.117      - peer0.org1.example.com:192.168.9.105      - peer1.org1.example.com:192.168.9.13      - peer0.org2.example.com:192.168.9.55      - peer1.org2.example.com:192.168.9.88    networks:      - byfn</code></pre>]]></content>
      
      
      <categories>
          
          <category> fabric </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fabric部署 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
