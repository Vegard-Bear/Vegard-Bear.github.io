<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>go vendor 使用</title>
      <link href="/2020/07/18/govendor/"/>
      <url>/2020/07/18/govendor/</url>
      
        <content type="html"><![CDATA[<p>三步走</p><h4 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h4><p>进入项目</p><pre><code>cd [project name]</code></pre><p>执行 </p><pre><code>govendor init</code></pre><p>项目根目录下即会自动生成 vendor 目录和 vendor.json 文件</p><h4 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h4><p>将已被引用且在 $GOPATH 下的所有包复制到 vendor 目录</p><pre><code>govendor add +external</code></pre><h4 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h4><p>拉取所有依赖的包到 vendor 目录(包括 $GOPATH 存在或不存在的包)</p><pre><code>govendor fetch +out</code></pre><h4 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h4><p>从远程仓库添加或更新某个包(不会在 $GOPATH 也存一份)</p><pre><code>govendor fetch golang.org/x/net/context</code></pre><p>安装指定版本的包</p><pre><code>govendor fetch golang.org/x/net/context@a4bbce9fcae005b22ae5443f6af064d80a6f5a55</code></pre><p>包已在 vendor 目录，但想从 $GOPATH 更新</p><pre><code>govendor update +vendor</code></pre><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://lessisbetter.site/2018/11/17/An-introduction-to-Govendor/" target="_blank" rel="noopener">https://lessisbetter.site/2018/11/17/An-introduction-to-Govendor/</a></p><p><a href="https://shockerli.net/post/go-package-manage-tool-govendor/" target="_blank" rel="noopener">https://shockerli.net/post/go-package-manage-tool-govendor/</a></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>向 fabric 贡献代码</title>
      <link href="/2020/07/14/contribute/"/>
      <url>/2020/07/14/contribute/</url>
      
        <content type="html"><![CDATA[<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p>进入 fabric目录</p><p>cd fabric</p><h2 id="1-先获取对应分支"><a href="#1-先获取对应分支" class="headerlink" title="1. 先获取对应分支"></a>1. 先获取对应分支</h2><p>git fetch origin [目标分支]</p><h2 id="2-切到对应分支"><a href="#2-切到对应分支" class="headerlink" title="2. 切到对应分支"></a>2. 切到对应分支</h2><p>git checkout -b [目标分支]</p><h2 id="3-更新最新代码（此步骤可省略）"><a href="#3-更新最新代码（此步骤可省略）" class="headerlink" title="3. 更新最新代码（此步骤可省略）"></a>3. 更新最新代码（此步骤可省略）</h2><p>goland -&gt; vcs -&gt; git -&gt; Rebase my Github fork -&gt; 选择原代码仓库</p><p>参考：<a href="https://www.zhihu.com/question/28676261" target="_blank" rel="noopener">https://www.zhihu.com/question/28676261</a></p><p>或者：</p><pre><code>git remote add upstream https://github.com/hyperledger/fabricgit fetch upstreamgit checkout [目标分支]git rebase upstream/[目标分支]git push -f origin [目标分支]</code></pre><h2 id="4-新建一个用于开发的分支"><a href="#4-新建一个用于开发的分支" class="headerlink" title="4. 新建一个用于开发的分支"></a>4. 新建一个用于开发的分支</h2><p>名字格式为 FAB-XXXX （issue序号）</p><p>git checkout -b FAB-XXX</p><h2 id="5-正式干活"><a href="#5-正式干活" class="headerlink" title="5. 正式干活"></a>5. 正式干活</h2><p>愉快滴开发（此处省略一万字）</p><h2 id="6-提交-：-git-commit-a-s"><a href="#6-提交-：-git-commit-a-s" class="headerlink" title="6. 提交 ：$ git commit -a -s"></a>6. 提交 ：$ git commit -a -s</h2><p>-s 选项是用于在commit message中自动生成sign off签名的</p><h2 id="7-编辑commit信息"><a href="#7-编辑commit信息" class="headerlink" title="7. 编辑commit信息"></a>7. 编辑commit信息</h2><pre><code>[FAB-XXXX] &lt;标题,官方文档说本行不能超过72个字符，实测不能超过55个字符&gt;&lt;空行&gt;This fixes #FAB-XXXX&lt;内容：每行不超过80字符，其中应该包括- 你的提交做了什么？- 为何选用这种方式去进行改动- 为何这种改动能够成功，比如提交你成功的代码测试结果&gt;</code></pre><h2 id="8-推送代码"><a href="#8-推送代码" class="headerlink" title="8. 推送代码"></a>8. 推送代码</h2><p>vcs -&gt; git -&gt; push</p><h2 id="9-pull-request"><a href="#9-pull-request" class="headerlink" title="9. pull request"></a>9. pull request</h2><p>登录 github,找到刚刚push的分支，点击 compare and pull request</p><p>注意要推送的目标分支，一般默认是master，这里需要修改为要推送的分支</p><p>确认commit信息没问题后点击右下角 create pull request</p><h2 id="9-等待合并"><a href="#9-等待合并" class="headerlink" title="9.等待合并"></a>9.等待合并</h2><p>会跑一堆测试，所有测试都过了以后经过两个以上的人approve则会被merge</p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><h3 id="git-push-ERROR-You-must-verify-your-email-address"><a href="#git-push-ERROR-You-must-verify-your-email-address" class="headerlink" title="git push ERROR: You must verify your email address"></a>git push ERROR: You must verify your email address</h3><p>解决方法：<a href="https://www.jianshu.com/p/30ee5daf1327" target="_blank" rel="noopener">https://www.jianshu.com/p/30ee5daf1327</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://davidkhala.github.io/2017/08/30/fabric-contribute/" target="_blank" rel="noopener">https://davidkhala.github.io/2017/08/30/fabric-contribute/</a></p>]]></content>
      
      
      <categories>
          
          <category> fabric </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fabric </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab CICD 自动化部署</title>
      <link href="/2020/07/14/cicd/"/>
      <url>/2020/07/14/cicd/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是-CI-CD-流水线？"><a href="#什么是-CI-CD-流水线？" class="headerlink" title="什么是 CI/CD 流水线？"></a>什么是 CI/CD 流水线？</h1><p>CI 代表持续集成（Continuous Integration），CD 代表持续交付（Continuous Delivery）和持续部署（Continuous Deployment）。也可以将它们看作是类似于软件开发生命周期的过程。</p><h4 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h4><p>持续集成指在和向远程仓库 push 代码后，在这次提交合并入主分支前进行一系列测试，构建等流程。假设现在有个应用的代码存储在 gitlab 上，每天开发者都 push 很多次提交，针对每次 push，你可以创建一系列脚本进行自动测试，降低往应用里引入错误的概率。这就是持续集成，它可应用在包括开发分支在内的多个分支上。</p><h4 id="持续部署"><a href="#持续部署" class="headerlink" title="持续部署"></a>持续部署</h4><p>持续部署在持续集成的基础上更进一步，指将推送指仓库默认分支的部署至产品环境。如果这部分需要手动触发，这就是一个持续交付（Continuous Delivery）环节</p><p><img src="https://static.geekbang.org/infoq/5cac03c74862e.png?imageView2/0/w/800" alt></p><p>如上图所示，该流水线展示了一个软件在其最终交付给客户或者投入上线之前，它在其生命周期内各个阶段中的移动过程。</p><p>我们可以看到软件从代码完成到最终交付先后会经历构建(build)、单元测试(unit test)、部署(deploy)、自动测试(auto test)、部署到生产环境(deploy to production)以及度量和验证(measure &amp; validate)等多个阶段。</p><p>具体阶段说明请参考 <a href="https://www.infoq.cn/article/WHt0wFMDRrBU-dtkh1Xp" target="_blank" rel="noopener">如何从零开始搭建 CI/CD 流水线</a></p><h1 id="部署方案"><a href="#部署方案" class="headerlink" title="部署方案"></a>部署方案</h1><p>目前与gitlab持续集成的比较流行的自动化部署解决方案主要有jenkins和GitLab CI/CD两种。</p><h2 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h2><p>Jenkins 是一款比较流行的持续化集成自动化工具，为我们提供了各种接口和工具，用以实现软件开发整个过程的自动化。</p><p>如下图所示：</p><p><img src="https://img-blog.csdnimg.cn/20190110163723744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NkYmRxbjAwMQ==,size_16,color_FFFFFF,t_70" alt></p><p>由客户端将代码push推送到git仓库，gitlab上配置了一个webHook的东西可以触发Jenkins的构建。</p><p>进入到Jenkins虚线范围内，它所做的事情非常多，从mvn构建代码，对代码进行静态分析，做单元测试，测试通过之后就可以build镜像，镜像构建成功后就把镜像push推送到Harbor镜像仓库中。</p><p>镜像push推送到镜像仓库后，我们就可以调用kubernetes集群的restAPI更新服务，而后kubernetes接收到了更新的指令，从Harbor镜像仓库pull拉取镜像，从而完成服务的更新与重启，最后我们从客户端来访问kubernetes集群的服务</p><p><big><strong>优点:</strong> </big> 编译服务和代码仓库分离，而且编译配置文件不需要在工程中配置，如果团队有开发、测试、配置管理员、运维、实施等完整的人员配置，那就采用jenkins，这样职责分明。jenkins依靠它丰富的插件，可以配置很多gitlab-ci不存在的功能，比如说看编译状况统计等。</p><p><big><strong>缺点:</strong> </big> 配置相对复杂，维护成本较高等</p><h2 id="GitLab-CI-CD"><a href="#GitLab-CI-CD" class="headerlink" title="GitLab CI/CD"></a>GitLab CI/CD</h2><p>GitLab CI/CD 是GitLab Continuous Integration（Gitlab持续集成）的简称。GitLab 自GitLab 8.0开始提供了持续集成的功能，且对所有项目默认开启。只要在项目仓库的根目录添加.gitlab-ci.yml文件，并且配置了Runner（运行器），那么每一次push或者合并请求（Merge Request）都会触发CI Pipeline。</p><p>如图所示，可以理解为GitLab CI/CD是Gitlab给开发者提供的一项功能，它在代码提交后自动触发一段开发者自定义的脚本，以此来完成诸如但不限于构建部署的工作。</p><p><img src="https://pic1.zhimg.com/80/v2-a91bb21049a0a797d4092789aa16b808_720w.jpg" alt></p><h3 id="关键概念"><a href="#关键概念" class="headerlink" title="关键概念"></a>关键概念</h3><h4 id="Pipelines"><a href="#Pipelines" class="headerlink" title="Pipelines"></a>Pipelines</h4><p>Pipelines 中文称为流水线，是分阶段执行的构建任务。如：安装依赖、运行测试、打包、部署开发服务器、部署生产服务器等流程。每一次push或者Merge Request都会触发生成一条新的Pipeline</p><h4 id="Stages"><a href="#Stages" class="headerlink" title="Stages"></a>Stages</h4><p>Stages 表示构建阶段，可以理解为上面所说“安装依赖”、“运行测试”等环节的流程。我们可以在一次 Pipeline 中定义多个 Stages，这些 Stages 会有以下特点：</p><ol><li>所有 Stages 会按照顺序运行，即当一个 Stage 完成后，下一个 Stage 才会开始（当然可以在.gitlab-ci.yml文件中配置上一阶段失败时下一阶段也执行）</li><li>只有当所有 Stages 完成后，该构建任务 (Pipeline) 才会成功</li><li>如果任何一个 Stage 失败，那么后面的 Stages 不会执行，该构建任务 (Pipeline) 失败</li></ol><h4 id="Jobs"><a href="#Jobs" class="headerlink" title="Jobs"></a>Jobs</h4><p>Jobs 表示构建的作业（或称之为任务），表示某个 Stage 里面执行的具体任务。我们可以在 Stages 里面定义多个 Jobs，这些 Jobs 会有以下特点：</p><ol><li>相同 Stage 中的 Jobs 无执行顺序要求，会并行执行</li><li>相同 Stage 中的 Jobs 都执行成功时，该 Stage 才会成功</li><li>如果任何一个 Job 失败，那么该 Stage 失败，即该构建任务 (Pipeline) 也失败（可以在.gitlab-ci.yml文件中配置允许某 Job 可以失败，也算该 Stage 成功）</li></ol><p><big> <strong>优点:</strong> </big>完美和gitlab进行集成，gitlab-ci已经集成进gitlab服务器中，在使用的时候只需要安装配置gitlab-runner即可。 gitlab-runner基本上提供了一个可以进行编译的环境，负责从gitlab中拉取代码，根据工程中配置的gitlab-ci.yml，执行相应的命令进行编译。</p><p><big> <strong>缺点:</strong> </big>功能相对少一些，没有web页面查看等</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>由于采用Jenkins进行自动化集成部署较为复杂，GitLab完美和GitLab集成，更为简单和方便，且对于我来说，GitLab CI/CD所提供等功能已足够使用，所以我更偏向于“小而精”的GitLab CI/CD而不是“大而全”的Jenkins。</p><h1 id="GitLab-CI-CD实战"><a href="#GitLab-CI-CD实战" class="headerlink" title="GitLab CI/CD实战"></a>GitLab CI/CD实战</h1><p>说了这么多，相信大家已经迫不及待地跃跃欲试了，下面就介绍一下GitLab CI/CD的使用步骤。</p><p>参考： <a href="http://192.168.9.251/help/ci/quick_start/README" target="_blank" rel="noopener">GitLab CI / CD入门</a></p><p>其实大体来说就两步：</p><ol><li>在项目的根目录下添加一个配置文件 .gitlab-ci.yaml</li><li>配置一个 GitLab Runner</li></ol><h2 id="配置-gitlab-ci-yml"><a href="#配置-gitlab-ci-yml" class="headerlink" title="配置 .gitlab-ci.yml"></a>配置 .gitlab-ci.yml</h2><p>GitLab 中默认开启了 Gitlab CI/CD 的支持，且使用YAML文件.gitlab-ci.yml来管理项目构建配置。该文件需要存放于项目仓库的根目录（默认路径，可在 GitLab 中修改），它定义该项目的 CI/CD 如何配置。所以，我们只需要在.gitlab-ci.yml配置文件中定义流水线的各个阶段，以及各个阶段中的若干作业（任务）即可。</p><p>下面是.gitlab-ci.yml文件的一个简单的Hello World示例：</p><pre><code># 定义 build 和 test 两个 Stages    stages:  - build  - test# 定义 build 阶段的一个 jobbuild_job:  stage: build  script:    - echo &quot;the project is being built&quot;# 定义 test 阶段的一个 jobtest_job:  stage: test  script:    - echo &quot;the project is being built&quot;</code></pre><p>以上配置中，用 stages 关键字来定义 Pipeline 中的各个构建阶段，然后用一些非关键字来定义 jobs。每个 job 中可以可以再用 stage 关键字来指定该 job 对应哪个 stage。job 里面的script关键字是每个 job 中必须要包含的，它表示每个 job 要执行的命令。</p><p>关于.gitlab-ci.yml的详细配置规则可参考官方文档 <a href="https://docs.gitlab.com/ce/ci/yaml/README.html" target="_blank" rel="noopener">GitLab CI/CD pipeline configuration reference</a></p><p>配置完就可以直接 commit &amp; push 这个配置文件了<br>一旦提交了这个 .gitlab-ci.yaml文件，那么下次在任何一次push到gitlab的操作，GitLab都会查找该.gitlab-ci.yml<br>文件并根据该文件的内容在 gitlab Runners上执行jobs。</p><p>此时再查看 CI/CD -&gt; popeline 可以发现会有一条pipeline 处于挂起阶段，这是因为我们没有注册gitlab runner的原因</p><p>导致无法运行 .gitlab-ci.yaml中的jobs，那么下面我们就来安装一下 gitlab runner</p><h2 id="安装GitLab-Runner"><a href="#安装GitLab-Runner" class="headerlink" title="安装GitLab Runner"></a>安装GitLab Runner</h2><p>gitlab runner 用于与git服务器进行通信，当有新的任务发布到当前runner时，runner会执行.gitlab-ci.yml所定义的CI指令。</p><p>如果你的操作系统和我一样是macOS，那么可以采用以下方式进行安装：</p><p>方式一：用homebrew进行安装，在命令行中直接执行</p><pre><code>brew install gitlab-runner</code></pre><p>方式二（官方）：Gitlab runner 10以上安装方式，若安装旧版本前往官网查看<br>（1）下载</p><pre><code>sudo curl --output /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-darwin-amd64</code></pre><p>(2)设置权限</p><pre><code>sudo chmod +x /usr/local/bin/gitlab-runner</code></pre><p>其他安装方式可参考 <a href="https://docs.gitlab.com/runner/install/" target="_blank" rel="noopener">Install GitLab Runner</a></p><h2 id="注册-gitlab-runner"><a href="#注册-gitlab-runner" class="headerlink" title="注册 gitlab runner"></a>注册 gitlab runner</h2><p>命令的交互式的过程如下：</p><pre><code>➜  ~ git:(master) ✗ sudo gitlab-runner registerRuntime platform                                    arch=amd64 os=linux pid=17 revision=6fbc7474 version=13.1.1Running in system-mode.# 输入公司的 GitLab 网站地址，可以在 Settings -&gt; CI/CD -&gt; Runner 中找到Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):http://192.168.9.251/# 你项目仓库的token，token可以在 Settings -&gt; CI/CD -&gt; Runner 中找到Please enter the gitlab-ci token for this runner:ienceCevg-sdxqQhBaGZ# 输入描述这个 runner 的名称，这个字段没有特殊的作用，只是为了区分不同的runner，这里可设置为runner-serverPlease enter the gitlab-ci description for this runner:[1b6095f8f875]: runner-server# tags这个属性，job和runner都有，用来匹配任务和执行任务的runner。runner的tag可以有多个，注册时用逗号（comma）分隔即可。当某个job的tag是当前runner tags的一个子集时，这个job就可以被分配到当前runner上执行Please enter the gitlab-ci tags for this runner (comma separated):testRegistering runner... succeeded                     runner=ienceCev# executor就是执行job的环境，通常我们都会选择Shell，如果有其他需要的也可以自行查阅文档。需要注意的是，runner执行的环境是非常干净的，像类似ANDROID_HOME的变量都需要通过shell指令export xxx=xxx在执行时输入，而不是使用设备上的环境。Please enter the executor: docker, shell, ssh, docker+machine, docker-ssh+machine, custom, docker-ssh, parallels, virtualbox, kubernetes:shellRunner registered successfully. Feel free to start it, but if it&#39;s running already the config should be automatically reloaded!</code></pre><p>以上流程注册成功之后，就可以在你的项目仓库中 Settings -&gt; CI/CD -&gt; Runner看到这个 Runner 了。</p><p><img src="https://note.youdao.com/yws/public/resource/bc554143fcca768f52bf1354ffef92eb/xmlnote/EE6BA5A809BA4D5E8DE7A943D7A8EB14/2579" alt></p><p>下面表格列出了 Gitlab runner 的常用命令：</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>gitlab-runner run</td><td>运行一个runner服务</td></tr><tr><td>gitlab-runner register</td><td>注册一个新的runner</td></tr><tr><td>gitlab-runner start</td><td>启动服务</td></tr><tr><td>gitlab-runner stop</td><td>关闭服务</td></tr><tr><td>gitlab-runner restart</td><td>重启服务</td></tr><tr><td>gitlab-runner status</td><td>查看各个runner的状态</td></tr><tr><td>gitlab-runner unregister</td><td>注销掉某个runner</td></tr><tr><td>gitlab-runner list</td><td>显示所有运行着的runner</td></tr><tr><td>gitlab-runner verify</td><td>检查已注册的运行程序是否可以连接到GitLab，但它不验证GitLab Runner服务是否正在使用运行程序。</td></tr></tbody></table><p>更多命令请参考 <a href="https://docs.gitlab.com/runner/commands/README.html" target="_blank" rel="noopener">GitLab Runner commands</a></p><p>此时，再回 gitlab 仓库查看并重新运行之前刮起的pipeline，等待一会儿会发现运行通过了</p><p><img src="https://note.youdao.com/yws/public/resource/bc554143fcca768f52bf1354ffef92eb/xmlnote/6E07FADE32774BABB8735C787120F04B/2601" alt="pipeline"></p><h1 id="踩坑指南"><a href="#踩坑指南" class="headerlink" title="踩坑指南"></a>踩坑指南</h1><h2 id="安装-gitlab-runner-失败"><a href="#安装-gitlab-runner-失败" class="headerlink" title="安装 gitlab runner 失败"></a>安装 gitlab runner 失败</h2><p>在实际安装 gitlab runner 的过程中发现采用上面的方式二会特别慢，而采用方式一则在下一步注册 Gitlab Runner的时候会出现如下问题：</p><pre><code>➜  ~ git:(master) ✗ sudo gitlab-runner registerPassword:[1]    37431 killed     sudo gitlab-runner register</code></pre><p>在网上搜寻解决方案未果，于是决定采用docker进行安装，步骤如下：</p><p>执行以下命令创建容器并启动</p><pre><code>docker run -d --name gitlab-runner --restart always -v ~/gitlab-runner/config:/etc/gitlab-runner -v /var/run/docker.sock:/var/run/docker.sock  gitlab/gitlab-runner:latest</code></pre><p>执行完成后可以 docker ps 一下进行查看</p><pre><code>➜  ~ git:(master) ✗ docker psCONTAINER ID        IMAGE                         COMMAND                  CREATED             STATUS              PORTS               NAMES1b6095f8f875        gitlab/gitlab-runner:latest   &quot;/usr/bin/dumb-init …&quot;   5 seconds ago       Up 3 seconds                            gitlab-runner</code></pre><p>然后注册 gitlab runner，只需执行</p><pre><code>docker exec -it 1b6095f8f875 gitlab-runner register</code></pre><p>其中 1b6095f8f875 是上一步执行的返回的 ID</p><h2 id="pipeline-运行时报错【Permission-denied】"><a href="#pipeline-运行时报错【Permission-denied】" class="headerlink" title="pipeline 运行时报错【Permission denied】"></a>pipeline 运行时报错【Permission denied】</h2><p><img src="https://note.youdao.com/yws/public/resource/bc554143fcca768f52bf1354ffef92eb/xmlnote/C512459EDB3A41A7938D5DB227C26E61/2630" alt></p><p>在跑 CICD的时候发现以上错误，一开始以为是权限的问题，但是加了dudo依然未能解决，后来通过复盘 gitlab runner安装、注册等全过程，发现在安装gitlab是采用的docker模式，但是注册gitlab时指定的运行环境是shell，于是换成了docker，重新跑了一下，原来的错误消失了</p><p>PS: 指定执行环境是docker后，还需指定 docker image 为 stable, 如下：</p><pre><code>Please enter the executor: virtualbox, docker+machine, docker-ssh, shell, parallels, ssh, docker-ssh+machine, kubernetes, custom, docker:dockerPlease enter the default Docker image (e.g. ruby:2.6):docker:stable</code></pre><h2 id="运行-docker-命令报错"><a href="#运行-docker-命令报错" class="headerlink" title="运行 docker 命令报错"></a>运行 docker 命令报错</h2><p>运行docker info命令时报错</p><p><img src="https://note.youdao.com/yws/public/resource/bc554143fcca768f52bf1354ffef92eb/xmlnote/5308331A5FF94826A5BFB66F128CF7CF/2644" alt></p><p>查找资料<br><a href="https://gitlab.com/gitlab-org/gitlab-runner/-/issues/4566" target="_blank" rel="noopener">https://gitlab.com/gitlab-org/gitlab-runner/-/issues/4566</a></p><p>修改配置文件</p><pre><code>vim gitlab-runner/config/config.toml</code></pre><p>volumes 配置项</p><pre><code>volumes = [&quot;/cache&quot;, &quot;/var/run/docker.sock:/var/run/docker.sock&quot;]</code></pre><p>重新启动 gitlab runner </p><pre><code>docker restart 99451b349e7f</code></pre><p>其中 99451b349e7f 为容器ID</p><p>再重新跑pipeline，发现原来的错误消失了</p><h2 id="执行shell脚本报错"><a href="#执行shell脚本报错" class="headerlink" title="执行shell脚本报错"></a>执行shell脚本报错</h2><p><img src="https://note.youdao.com/yws/public/resource/bc554143fcca768f52bf1354ffef92eb/xmlnote/3B9F8F27F2A049CD92C6C92BB1A35B19/2664" alt></p><p>通过搜寻资料发现</p><p>请注意，docker镜像是基于alpine的，默认不提供bash。<br>所以脚本应该使用sh，以便更加通用。</p><p>改成如下格式后经过测试通过</p><pre><code>sh scripts/fmt.sh</code></pre><h2 id="curl命令未找到-【curl-not-found】"><a href="#curl命令未找到-【curl-not-found】" class="headerlink" title="curl命令未找到 【curl: not found】"></a>curl命令未找到 【curl: not found】</h2><p><img src="https://note.youdao.com/yws/public/resource/bc554143fcca768f52bf1354ffef92eb/xmlnote/24C3D0434AB147BC80AE067140047D01/2671" alt></p><p>搜寻资料<a href="https://stackoverflow.com/questions/46031069/curl-command-not-found-on-gitlab-ci-yml" target="_blank" rel="noopener">curl command not found on .gitlab-ci.yml</a></p><p>使用apk命令下载 curl 命令，而不是 apt-get</p><pre><code>services:  - name: docker:dind  before_script:    - apk add --update curl &amp;&amp; rm -rf /var/cache/apk/*</code></pre><h2 id="编译报错-not-found"><a href="#编译报错-not-found" class="headerlink" title="编译报错 not found"></a>编译报错 not found</h2><p>参考<br><a href="https://www.dyxmq.cn/uncategorized/installed-go-binary-not-found-in-path-on-alpine-linux-docker.html" target="_blank" rel="noopener">https://www.dyxmq.cn/uncategorized/installed-go-binary-not-found-in-path-on-alpine-linux-docker.html</a></p><p>编译时添加参数CGO_ENABLED=0</p><pre><code>CGO_ENABLED=0 go build</code></pre><h2 id="安装-go-环境失败"><a href="#安装-go-环境失败" class="headerlink" title="安装 go 环境失败"></a>安装 go 环境失败</h2><p>下载了 go 的安装包且配置好了 GOROOT 和 GOPATH 等，但执行 go version 依旧报错</p><p><img src="https://note.youdao.com/yws/public/resource/bc554143fcca768f52bf1354ffef92eb/xmlnote/F3FF604F026B45F38A44D48691D10B37/2694" alt></p><p>查找资料<br><a href="https://stackoverflow.com/questions/34729748/installed-go-binary-not-found-in-path-on-alpine-linux-docker" target="_blank" rel="noopener">https://stackoverflow.com/questions/34729748/installed-go-binary-not-found-in-path-on-alpine-linux-docker</a></p><p>执行以下命令修复丢失的依赖项，解决</p><pre><code>mkdir /lib64 &amp;&amp; ln -s /lib/libc.musl-x86_64.so.1 /lib64/ld-linux-x86-64.so.2</code></pre><h2 id="执行-golangci-lint-run-报错：DecodeRuneInString-not-declared-by-package-utf8-typecheck"><a href="#执行-golangci-lint-run-报错：DecodeRuneInString-not-declared-by-package-utf8-typecheck" class="headerlink" title="执行 golangci-lint run 报错：DecodeRuneInString not declared by package utf8 (typecheck)"></a>执行 golangci-lint run 报错：DecodeRuneInString not declared by package utf8 (typecheck)</h2><p><a href="https://github.com/golangci/golangci-lint/issues/658" target="_blank" rel="noopener">https://github.com/golangci/golangci-lint/issues/658</a></p><p>替换 golangci-lint 版本由 v1.16.0 为 v1.18.0 解决问题</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://www.infoq.cn/article/WHt0wFMDRrBU-dtkh1Xp" target="_blank" rel="noopener">如何从零开始搭建 CI/CD 流水线</a></li><li><a href="https://docs.gitlab.com/ee/ci/" target="_blank" rel="noopener">GitLab CI/CD官方文档</a></li><li><a href="https://developer.aliyun.com/article/754508" target="_blank" rel="noopener">GitLab+Docker搭建CI/CD自动化部署</a></li><li><a href="https://www.cnblogs.com/jingtyu/p/9604317.html" target="_blank" rel="noopener">自动化部署方案CICD</a></li><li><a href="https://zhuanlan.zhihu.com/p/51163261" target="_blank" rel="noopener">Gitlab CI&amp;CD 实战经验分享</a></li><li><a href="https://blinkfox.github.io/2018/11/22/ruan-jian-gong-ju/devops/gitlab-ci-jie-shao-he-shi-yong/#alipay" target="_blank" rel="noopener">GitLab CI/CD 介绍和使用</a></li><li><a href="https://blog.csdn.net/qq_33591903/article/details/102460774" target="_blank" rel="noopener">浅谈CICD持续集成、持续部署的流程</a></li><li><a href="https://www.jianshu.com/p/30e3f2940078" target="_blank" rel="noopener">gitlab-ci的简易入门——runners</a></li><li><a href="https://juejin.im/post/5e741a5a518825490e4582b7" target="_blank" rel="noopener">GitLab CI/CD 自动部署构建</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> GitLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BCCSP调用栈</title>
      <link href="/2020/06/29/bccsp/"/>
      <url>/2020/06/29/bccsp/</url>
      
        <content type="html"><![CDATA[<p>简单梳理了一下 fabric 中 BCCSP 模块的调用栈，建议右键新标签页中打开，查看高清大图。</p><p><img src="https://note.youdao.com/yws/public/resource/bc554143fcca768f52bf1354ffef92eb/xmlnote/4E750228D6014F68961B4DCDE6B9576C/2221" alt="BCCSP"></p>]]></content>
      
      
      <categories>
          
          <category> fabric </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fabric </tag>
            
            <tag> 密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLand 类图生成工具 plantuml</title>
      <link href="/2020/06/29/plantuml/"/>
      <url>/2020/06/29/plantuml/</url>
      
        <content type="html"><![CDATA[<h2 id="克隆项目"><a href="#克隆项目" class="headerlink" title="克隆项目"></a>克隆项目</h2><p>在gopath路径下</p><pre><code>git clone git.oschina.net/jscode/go-package-plantuml</code></pre><h2 id="进入项目"><a href="#进入项目" class="headerlink" title="进入项目"></a>进入项目</h2><pre><code>go build</code></pre><p>在 GOPATH/bin 生成一个 二进制文件 plantuml</p><h2 id="用GoLand打开项目，终端输入生成类图命令"><a href="#用GoLand打开项目，终端输入生成类图命令" class="headerlink" title="用GoLand打开项目，终端输入生成类图命令"></a>用GoLand打开项目，终端输入生成类图命令</h2><pre><code>~/go/bin/go-package-plantuml --codedir /Users/xiongweigang/go/src/github.com/wasabi/backEnd --gopath /Users/xiongweigang/go --outputfile /tmp/uml.txt --ignoredir /Users/xiongweigang/go/src/github.com/wasabi/backEnd/vendor</code></pre><h2 id="生成png图片"><a href="#生成png图片" class="headerlink" title="生成png图片"></a>生成png图片</h2><pre><code>java -jar ～/plantuml.jar -verbose -graphvizdot /usr/local/bin/dot /tmp/uml.txt</code></pre><h2 id="生成svg图片-后边加上-tsvg"><a href="#生成svg图片-后边加上-tsvg" class="headerlink" title="生成svg图片 后边加上 -tsvg"></a>生成svg图片 后边加上 -tsvg</h2><pre><code>java -jar ～/plantuml.jar -verbose -graphvizdot /usr/local/bin/dot /tmp/uml.txt -tsvg</code></pre><p>生成后用浏览器打开</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/dwjpeng2/article/details/81667214" target="_blank" rel="noopener">https://blog.csdn.net/dwjpeng2/article/details/81667214</a></p><p><a href="https://yougg.github.io/2017/11/25/goland%E4%B8%AD%E4%BD%BF%E7%94%A8plantuml%E7%94%9F%E6%88%90go-uml%E5%9B%BE/" target="_blank" rel="noopener">https://yougg.github.io/2017/11/25/goland%E4%B8%AD%E4%BD%BF%E7%94%A8plantuml%E7%94%9F%E6%88%90go-uml%E5%9B%BE/</a></p><p><a href="https://juejin.im/post/5da9c00de51d4524cd3b3942" target="_blank" rel="noopener">https://juejin.im/post/5da9c00de51d4524cd3b3942</a></p><p><a href="https://studygolang.com/articles/9719" target="_blank" rel="noopener">https://studygolang.com/articles/9719</a></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fabric多机部署（raft共识）</title>
      <link href="/2020/02/16/sort-algorithms/"/>
      <url>/2020/02/16/sort-algorithms/</url>
      
        <content type="html"><![CDATA[<h1 id="fabric多机部署-（raft共识）"><a href="#fabric多机部署-（raft共识）" class="headerlink" title="fabric多机部署 （raft共识）"></a>fabric多机部署 （raft共识）</h1><h2 id="0-准备工作"><a href="#0-准备工作" class="headerlink" title="0. 准备工作"></a>0. 准备工作</h2><h4 id="克隆项目"><a href="#克隆项目" class="headerlink" title="克隆项目"></a>克隆项目</h4><pre><code>git clone git@192.168.9.251:jilg/deployFabric_Raft.git</code></pre><h4 id="节点分配"><a href="#节点分配" class="headerlink" title="节点分配"></a>节点分配</h4><table><thead><tr><th>主机1</th><th>主机 2</th></tr></thead><tbody><tr><td>Org1 peer0 1</td><td>Org2 peer 0 1</td></tr><tr><td>Orderer 0 1 2</td><td>Orderer 0 1</td></tr></tbody></table><br>下面的步骤先在一台主机上操作<h2 id="1-修改证书，创始区块配置文件"><a href="#1-修改证书，创始区块配置文件" class="headerlink" title="1. 修改证书，创始区块配置文件"></a>1. 修改证书，创始区块配置文件</h2><p>先删除原有配置</p><pre><code>rm -rf crypto-configrm -rf channel-artifacts</code></pre><h4 id="crypto-config-yaml"><a href="#crypto-config-yaml" class="headerlink" title="crypto-config.yaml"></a>crypto-config.yaml</h4><pre><code>PeerOrgs:  - Name: Org1    Domain: org1.example.com    EnableNodeOUs: true    Template:      Count: 2    Users:      Count: 1    Specs:      - Hostname: orderer0      - Hostname: orderer1      - Hostname: orderer2  - Name: Org2    Domain: org2.example.com    EnableNodeOUs: true    Template:      Count: 2    Users:      Count: 1    Specs:      - Hostname: orderer0      - Hostname: orderer1</code></pre><h4 id="configtx-yaml"><a href="#configtx-yaml" class="headerlink" title="configtx.yaml"></a>configtx.yaml</h4><pre><code>SampleMultiNodeEtcdRaft:        &lt;&lt;: *ChannelDefaults        Capabilities:            &lt;&lt;: *ChannelCapabilities        Orderer:            &lt;&lt;: *OrdererDefaults            OrdererType: etcdraft            EtcdRaft:                Consenters:                - Host: orderer0.org1.example.com                  Port: 7050                  ClientTLSCert: crypto-config/peerOrganizations/org1.example.com/peers/orderer0.org1.example.com/tls/server.crt                  ServerTLSCert: crypto-config/peerOrganizations/org1.example.com/peers/orderer0.org1.example.com/tls/server.crt                - Host: orderer1.org1.example.com                  Port: 8050                  ClientTLSCert: crypto-config/peerOrganizations/org1.example.com/peers/orderer1.org1.example.com/tls/server.crt                  ServerTLSCert: crypto-config/peerOrganizations/org1.example.com/peers/orderer1.org1.example.com/tls/server.crt                - Host: orderer2.org1.example.com                  Port: 9050                  ClientTLSCert: crypto-config/peerOrganizations/org1.example.com/peers/orderer2.org1.example.com/tls/server.crt                  ServerTLSCert: crypto-config/peerOrganizations/org1.example.com/peers/orderer2.org1.example.com/tls/server.crt                - Host: orderer0.org2.example.com                  Port: 7050                  ClientTLSCert: crypto-config/peerOrganizations/org2.example.com/peers/orderer0.org2.example.com/tls/server.crt                  ServerTLSCert: crypto-config/peerOrganizations/org2.example.com/peers/orderer0.org2.example.com/tls/server.crt                - Host: orderer1.org2.example.com                  Port: 8050                  ClientTLSCert: crypto-config/peerOrganizations/org2.example.com/peers/orderer1.org2.example.com/tls/server.crt                  ServerTLSCert: crypto-config/peerOrganizations/org2.example.com/peers/orderer1.org2.example.com/tls/server.crt            Addresses:                - orderer0.org1.example.com:7050                - orderer1.org1.example.com:8050                - orderer2.org1.example.com:9050                - orderer0.org2.example.com:7050                - orderer1.org2.example.com:8050            Organizations:            - *Org1            - *Org2            Capabilities:                &lt;&lt;: *OrdererCapabilities        Application:            &lt;&lt;: *ApplicationDefaults            Organizations:            - &lt;&lt;: *Org1            - &lt;&lt;: *Org2        Consortiums:            SampleConsortium:                Organizations:                - *Org1                - *Org2</code></pre><p>1、生成公私钥和证书</p><pre><code>../bin/cryptogen generate --config=./crypto-config.yaml </code></pre><p>2、生成创世区块</p><pre><code>../bin/configtxgen -profile SampleMultiNodeEtcdRaft -outputBlock ./channel-artifacts/genesis.block</code></pre><p>3、生成Channel配置区块</p><pre><code>../bin/configtxgen -profile TwoOrgsChannel -outputCreateChannelTx ./channel-artifacts/channel.tx -channelID mychannel </code></pre><p>4、更新锚节点</p><pre><code>../bin/configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org1MSPanchors.tx -channelID mychannel -asOrg Org1MSP../bin/configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org2MSPanchors.tx -channelID mychannel -asOrg Org2MSP</code></pre><h2 id="3-修改peer配置"><a href="#3-修改peer配置" class="headerlink" title="3. 修改peer配置"></a>3. 修改peer配置</h2><h4 id="docker-compose-base-yaml"><a href="#docker-compose-base-yaml" class="headerlink" title="docker-compose-base.yaml"></a>docker-compose-base.yaml</h4><pre><code># Copyright IBM Corp. All Rights Reserved.## SPDX-License-Identifier: Apache-2.0#version: &#39;2&#39;services:  orderer.example.com:    container_name: orderer.example.com    extends:      file: peer-base.yaml      service: orderer-base    volumes:        - ../channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block        - ../crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp:/var/hyperledger/orderer/msp        - ../crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/:/var/hyperledger/orderer/tls    ports:      - 7050:7050  peer0.org1.example.com:    container_name: peer0.org1.example.com    extends:      file: peer-base.yaml      service: peer-base    environment:      - CORE_PEER_ID=peer0.org1.example.com      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051      - CORE_PEER_CHAINCODEADDRESS=peer0.org1.example.com:7052      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052      - CORE_PEER_GOSSIP_BOOTSTRAP=peer1.org1.example.com:8051      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com:7051      - CORE_PEER_LOCALMSPID=Org1MSP      - CORE_PEER_ENBLKROUTER=true    volumes:        - /var/run/:/host/var/run/        - ../crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp:/etc/hyperledger/fabric/msp        - ../crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls:/etc/hyperledger/fabric/tls        - peer0.org1.example.com:/var/hyperledger/production    ports:      - 7051:7051      - 9099:9099  peer1.org1.example.com:    container_name: peer1.org1.example.com    extends:      file: peer-base.yaml      service: peer-base    environment:      - CORE_PEER_ID=peer1.org1.example.com      - CORE_PEER_ADDRESS=peer1.org1.example.com:8051      - CORE_PEER_LISTENADDRESS=0.0.0.0:8051      - CORE_PEER_CHAINCODEADDRESS=peer1.org1.example.com:8052      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:8052      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org1.example.com:8051      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051      - CORE_PEER_LOCALMSPID=Org1MSP      - CORE_PEER_ENBLKROUTER=true    volumes:        - /var/run/:/host/var/run/        - ../crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/msp:/etc/hyperledger/fabric/msp        - ../crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls:/etc/hyperledger/fabric/tls        - peer1.org1.example.com:/var/hyperledger/production    ports:      - 8051:8051      - 10099:9099  peer0.org2.example.com:    container_name: peer0.org2.example.com    extends:      file: peer-base.yaml      service: peer-base    environment:      - CORE_PEER_ID=peer0.org2.example.com      - CORE_PEER_ADDRESS=peer0.org2.example.com:9051      - CORE_PEER_LISTENADDRESS=0.0.0.0:9051      - CORE_PEER_CHAINCODEADDRESS=peer0.org2.example.com:9052      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:9052      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org2.example.com:9051      - CORE_PEER_GOSSIP_BOOTSTRAP=peer1.org2.example.com:10051      - CORE_PEER_LOCALMSPID=Org2MSP      - CORE_PEER_ENBLKROUTER=true    volumes:        - /var/run/:/host/var/run/        - ../crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/msp:/etc/hyperledger/fabric/msp        - ../crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls:/etc/hyperledger/fabric/tls        - peer0.org2.example.com:/var/hyperledger/production    ports:      - 9051:9051      - 9099:9099  peer1.org2.example.com:    container_name: peer1.org2.example.com    extends:      file: peer-base.yaml      service: peer-base    environment:      - CORE_PEER_ID=peer1.org2.example.com      - CORE_PEER_ADDRESS=peer1.org2.example.com:10051      - CORE_PEER_LISTENADDRESS=0.0.0.0:10051      - CORE_PEER_CHAINCODEADDRESS=peer1.org2.example.com:10052      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:10052      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org2.example.com:10051      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org2.example.com:9051      - CORE_PEER_LOCALMSPID=Org2MSP      - CORE_PEER_ENBLKROUTER=true    volumes:        - /var/run/:/host/var/run/        - ../crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/msp:/etc/hyperledger/fabric/msp        - ../crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls:/etc/hyperledger/fabric/tls        - peer1.org2.example.com:/var/hyperledger/production    ports:      - 10051:10051      - 10099:9099</code></pre><h2 id="4-修改组织1配置"><a href="#4-修改组织1配置" class="headerlink" title="4. 修改组织1配置"></a>4. 修改组织1配置</h2><h4 id="docker-compose-org1-35-yaml"><a href="#docker-compose-org1-35-yaml" class="headerlink" title="docker-compose-org1-35.yaml"></a>docker-compose-org1-35.yaml</h4><pre><code>version: &#39;2&#39;volumes:  orderer0.org1.example.com:  orderer1.org1.example.com:  orderer2.org1.example.com:  peer0.org1.example.com:  peer1.org1.example.com:networks:  byfn:services:  orderer0.org1.example.com:    environment:      - ORDERER_GENERAL_LOCALMSPID=Org1MSP    extends:      file: base/peer-base.yaml      service: orderer-base    container_name: orderer0.org1.example.com    networks:      - byfn    volumes:      - ./channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block      - ./crypto-config/peerOrganizations/org1.example.com/peers/orderer0.org1.example.com/msp:/var/hyperledger/orderer/msp      - ./crypto-config/peerOrganizations/org1.example.com/peers/orderer0.org1.example.com/tls/:/var/hyperledger/orderer/tls      - orderer0.org1.example.com:/var/hyperledger/production/orderer    ports:      - 7050:7050    extra_hosts:      - orderer0.org1.example.com:192.168.9.35      - orderer1.org1.example.com:192.168.9.35      - orderer2.org1.example.com:192.168.9.35      - orderer0.org2.example.com:192.168.9.28      - orderer1.org2.example.com:192.168.9.28  orderer1.org1.example.com:    environment:      - ORDERER_GENERAL_LOCALMSPID=Org1MSP    extends:      file: base/peer-base.yaml      service: orderer-base    container_name: orderer1.org1.example.com    networks:      - byfn    volumes:      - ./channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block      - ./crypto-config/peerOrganizations/org1.example.com/peers/orderer1.org1.example.com/msp:/var/hyperledger/orderer/msp      - ./crypto-config/peerOrganizations/org1.example.com/peers/orderer1.org1.example.com/tls/:/var/hyperledger/orderer/tls      - orderer1.org1.example.com:/var/hyperledger/production/orderer    ports:      - 8050:7050    extra_hosts:      - orderer0.org1.example.com:192.168.9.35      - orderer1.org1.example.com:192.168.9.35      - orderer2.org1.example.com:192.168.9.35      - orderer0.org2.example.com:192.168.9.28      - orderer1.org2.example.com:192.168.9.28  orderer2.org1.example.com:    environment:      - ORDERER_GENERAL_LOCALMSPID=Org1MSP    extends:      file: base/peer-base.yaml      service: orderer-base    container_name: orderer2.org1.example.com    networks:      - byfn    volumes:      - ./channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block      - ./crypto-config/peerOrganizations/org1.example.com/peers/orderer2.org1.example.com/msp:/var/hyperledger/orderer/msp      - ./crypto-config/peerOrganizations/org1.example.com/peers/orderer2.org1.example.com/tls/:/var/hyperledger/orderer/tls      - orderer2.org1.example.com:/var/hyperledger/production/orderer    ports:      - 9050:7050    extra_hosts:      - orderer0.org1.example.com:192.168.9.35      - orderer1.org1.example.com:192.168.9.35      - orderer2.org1.example.com:192.168.9.35      - orderer0.org2.example.com:192.168.9.28      - orderer1.org2.example.com:192.168.9.28  peer0.org1.example.com:    container_name: peer0.org1.example.com    extends:      file:  base/docker-compose-base.yaml      service: peer0.org1.example.com    networks:      - byfn    extra_hosts:      - orderer0.org1.example.com:192.168.9.35      - orderer1.org1.example.com:192.168.9.35      - orderer2.org1.example.com:192.168.9.35      - orderer0.org2.example.com:192.168.9.28      - orderer1.org2.example.com:192.168.9.28  peer1.org1.example.com:    container_name: peer1.org1.example.com    extends:      file:  base/docker-compose-base.yaml      service: peer1.org1.example.com    networks:      - byfn    extra_hosts:      - orderer0.org1.example.com:192.168.9.35      - orderer1.org1.example.com:192.168.9.35      - orderer2.org1.example.com:192.168.9.35      - orderer0.org2.example.com:192.168.9.28      - orderer1.org2.example.com:192.168.9.28  cli:    container_name: cli    image: 192.168.9.8:80/fabric1.4performance/hyperledger/fabric-tools:sles12sp3-latest    tty: true    stdin_open: true    environment:      - GOPATH=/opt/gopath      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock      #- FABRIC_LOGGING_SPEC=DEBUG      - FABRIC_LOGGING_SPEC=INFO      - CORE_PEER_BCCSP_DEFAULT=GM      - CORE_PEER_ID=cli      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051      - CORE_PEER_LOCALMSPID=Org1MSP      - CORE_PEER_TLS_ENABLED=true      - CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt      - CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key      - CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer    command: /bin/bash    volumes:      - /var/run/:/host/var/run/      - ./../chaincode/:/opt/gopath/src/github.com/chaincode      - ./../unionbank/:/opt/gopath/src/unionbank      - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/      - ./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/      - ./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts    extra_hosts:      - orderer0.org1.example.com:192.168.9.35      - orderer1.org1.example.com:192.168.9.35      - orderer2.org1.example.com:192.168.9.35      - orderer0.org2.example.com:192.168.9.28      - orderer1.org2.example.com:192.168.9.28      - peer0.org1.example.com:192.168.9.35      - peer1.org1.example.com:192.168.9.35      - peer0.org2.example.com:192.168.9.28      - peer1.org2.example.com:192.168.9.28    networks:      - byfn</code></pre><h2 id="5-修改组织2配置"><a href="#5-修改组织2配置" class="headerlink" title="5. 修改组织2配置"></a>5. 修改组织2配置</h2><h4 id="docker-compose-org2-28-yaml"><a href="#docker-compose-org2-28-yaml" class="headerlink" title="docker-compose-org2-28.yaml"></a>docker-compose-org2-28.yaml</h4><pre><code>version: &#39;2&#39;volumes:  orderer0.org2.example.com:  orderer1.org2.example.com:  peer0.org2.example.com:  peer1.org2.example.com:networks:  byfn:services:  orderer0.org2.example.com:    environment:      - ORDERER_GENERAL_LOCALMSPID=Org2MSP    extends:      file: base/peer-base.yaml      service: orderer-base    container_name: orderer0.org2.example.com    networks:      - byfn    volumes:      - ./channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block      - ./crypto-config/peerOrganizations/org2.example.com/peers/orderer0.org2.example.com/msp:/var/hyperledger/orderer/msp      - ./crypto-config/peerOrganizations/org2.example.com/peers/orderer0.org2.example.com/tls/:/var/hyperledger/orderer/tls      - orderer0.org2.example.com:/var/hyperledger/production/orderer    ports:      - 7050:7050    extra_hosts:      - orderer0.org1.example.com:192.168.9.35      - orderer1.org1.example.com:192.168.9.35      - orderer2.org1.example.com:192.168.9.35      - orderer0.org2.example.com:192.168.9.28      - orderer1.org2.example.com:192.168.9.28  orderer1.org2.example.com:    environment:      - ORDERER_GENERAL_LOCALMSPID=Org2MSP    extends:      file: base/peer-base.yaml      service: orderer-base    container_name: orderer1.org2.example.com    networks:      - byfn    volumes:      - ./channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block      - ./crypto-config/peerOrganizations/org2.example.com/peers/orderer1.org2.example.com/msp:/var/hyperledger/orderer/msp      - ./crypto-config/peerOrganizations/org2.example.com/peers/orderer1.org2.example.com/tls/:/var/hyperledger/orderer/tls      - orderer1.org2.example.com:/var/hyperledger/production/orderer    ports:      - 8050:7050    extra_hosts:      - orderer0.org1.example.com:192.168.9.35      - orderer1.org1.example.com:192.168.9.35      - orderer2.org1.example.com:192.168.9.35      - orderer0.org2.example.com:192.168.9.28      - orderer1.org2.example.com:192.168.9.28  peer0.org2.example.com:    container_name: peer0.org2.example.com    extends:      file:  base/docker-compose-base.yaml      service: peer0.org2.example.com    networks:      - byfn    extra_hosts:      - orderer0.org1.example.com:192.168.9.35      - orderer1.org1.example.com:192.168.9.35      - orderer2.org1.example.com:192.168.9.35      - orderer0.org2.example.com:192.168.9.28      - orderer1.org2.example.com:192.168.9.28  peer1.org2.example.com:    container_name: peer1.org2.example.com    extends:      file:  base/docker-compose-base.yaml      service: peer1.org2.example.com    networks:      - byfn    extra_hosts:      - orderer0.org1.example.com:192.168.9.35      - orderer1.org1.example.com:192.168.9.35      - orderer2.org1.example.com:192.168.9.35      - orderer0.org2.example.com:192.168.9.28      - orderer1.org2.example.com:192.168.9.28</code></pre><p>以上步骤完成后，将项目拷贝到其他的主机上</p><h2 id="6-启动fabric网络"><a href="#6-启动fabric网络" class="headerlink" title="6. 启动fabric网络"></a>6. 启动fabric网络</h2><p>启动主机1</p><pre><code>docker-compose -f docker-compose-org1-35.yaml up -d</code></pre><p>启动主机2</p><pre><code>docker-compose -f docker-compose-org2-28.yaml up -d</code></pre><p>启动脚本</p><pre><code>#!/bin/bashexport CHANNEL_NAME=mychannelexport ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/orderer0.org1.example.com/msp/tlscacerts/tlsca.org1.example.com-cert.pem## Create channelpeer channel create -o orderer0.org1.example.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/channel.tx --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA## Join all the peers to the channelpeer channel join -b $CHANNEL_NAME.block## Set the anchor peers for each org in the channelpeer channel update -o orderer0.org1.example.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/Org1MSPanchors.tx --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA## Install chaincode on peer0.org1peer chaincode install -n mycc -v 1.0 -p github.com/chaincode/chaincode_example02peer chaincode install -n public -v 1.0 -p unionbank/chaincode/publicpeer chaincode install -n forfeiting -v 1.0 -p unionbank/chaincode/forfeitingsleep 5## pee1.org1export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/mspexport CORE_PEER_ADDRESS=peer1.org1.example.com:8051export CORE_PEER_LOCALMSPID=&quot;Org1MSP&quot;export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crtpeer channel join -b $CHANNEL_NAME.blockpeer chaincode install -n mycc -v 1.0 -p github.com/chaincode/chaincode_example02peer chaincode install -n public -v 1.0 -p unionbank/chaincode/publicpeer chaincode install -n forfeiting -v 1.0 -p unionbank/chaincode/forfeitingsleep 5## peer0.org2export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/mspexport CORE_PEER_ADDRESS=peer0.org2.example.com:9051export CORE_PEER_LOCALMSPID=&quot;Org2MSP&quot;export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crtpeer channel join -b $CHANNEL_NAME.blockpeer channel update -o orderer0.org1.example.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/Org2MSPanchors.tx --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CApeer chaincode install -n mycc -v 1.0 -p github.com/chaincode/chaincode_example02peer chaincode install -n public -v 1.0 -p unionbank/chaincode/publicpeer chaincode install -n forfeiting -v 1.0 -p unionbank/chaincode/forfeitingsleep 5## peer1.org2export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/mspexport CORE_PEER_ADDRESS=peer1.org2.example.com:10051export CORE_PEER_LOCALMSPID=&quot;Org2MSP&quot;export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls/ca.crtpeer channel join -b $CHANNEL_NAME.blockpeer chaincode install -n mycc -v 1.0 -p github.com/chaincode/chaincode_example02peer chaincode install -n public -v 1.0 -p unionbank/chaincode/publicpeer chaincode install -n forfeiting -v 1.0 -p unionbank/chaincode/forfeitingsleep 5# Instantiate chaincode on peer0.org1echo &quot;Instantiating chaincode on peer0.org1...&quot;export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/mspexport CORE_PEER_ADDRESS=peer0.org1.example.com:7051export CORE_PEER_LOCALMSPID=&quot;Org1MSP&quot;export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crtsleep 5peer chaincode instantiate -o orderer0.org1.example.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA -C $CHANNEL_NAME -n mycc -v 1.0 -c &#39;{&quot;Args&quot;:[&quot;init&quot;,&quot;a&quot;, &quot;100&quot;, &quot;b&quot;,&quot;200&quot;]}&#39;sleep 5peer chaincode instantiate -o orderer0.org1.example.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA -C $CHANNEL_NAME -n public -v 1.0 -c &#39;{&quot;Args&quot;:[]}&#39;sleep 5peer chaincode instantiate -o orderer0.org1.example.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA -C $CHANNEL_NAME -n forfeiting -v 1.0 -c &#39;{&quot;Args&quot;:[]}&#39;sleep 5# Query chaincode on peer0.org1peer chaincode query -C $CHANNEL_NAME -n mycc -c &#39;{&quot;Args&quot;:[&quot;query&quot;,&quot;a&quot;]}&#39;# Invoke chaincode on peer0.org1peer chaincode invoke -o orderer0.org1.example.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA -C $CHANNEL_NAME -n mycc  -c &#39;{&quot;Args&quot;:[&quot;invoke&quot;,&quot;a&quot;,&quot;b&quot;,&quot;10&quot;]}&#39;sleep 5# Query chaincode on peer0.org1peer chaincode query -C $CHANNEL_NAME -n mycc -c &#39;{&quot;Args&quot;:[&quot;query&quot;,&quot;a&quot;]}&#39;</code></pre><p>注意清除原有不需要的容器和镜像，否则可能会用老的镜像，就比如某些链码的镜像</p><pre><code>docker rm -f $(docker ps -a|grep  dev|awk &#39;{print $1}&#39;)docker rmi -f $(docker images|grep  dev|awk &#39;{print $1}&#39;)docker volume rm -f $(docker volume ls -q)</code></pre><pre><code>version: &#39;2&#39;volumes:  orderer0.example.com:  orderer1.example.com:  orderer2.example.com:  peer0.org1.example.com:  peer1.org1.example.com:  peer0.org2.example.com:  peer1.org2.example.com:networks:  byfn:services:  orderer0.example.com:    environment:      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP    extends:      file: base/peer-base.yaml      service: orderer-base    container_name: orderer0.example.com    networks:      - byfn    volumes:      - ./channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block      - ./crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/msp:/var/hyperledger/orderer/msp      - ./crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/tls/:/var/hyperledger/orderer/tls      - orderer0.example.com:/var/hyperledger/production/orderer    ports:      - 7050:7050    extra_hosts:      - orderer0.example.com:192.168.9.108      - orderer1.example.com:192.168.9.17      - orderer2.example.com:192.168.9.117      - peer0.org1.example.com:192.168.9.105      - peer1.org1.example.com:192.168.9.13      - peer0.org2.example.com:192.168.9.55      - peer1.org2.example.com:192.168.9.88  orderer1.example.com:    environment:      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP    extends:      file: base/peer-base.yaml      service: orderer-base    container_name: orderer1.example.com    networks:      - byfn    volumes:      - ./channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block      - ./crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/msp:/var/hyperledger/orderer/msp      - ./crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/tls/:/var/hyperledger/orderer/tls      - orderer1.example.com:/var/hyperledger/production/orderer    ports:      - 8050:7050    extra_hosts:      - orderer0.example.com:192.168.9.108      - orderer1.example.com:192.168.9.17      - orderer2.example.com:192.168.9.117      - peer0.org1.example.com:192.168.9.105      - peer1.org1.example.com:192.168.9.13      - peer0.org2.example.com:192.168.9.55      - peer1.org2.example.com:192.168.9.88  orderer2.example.com:    environment:      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP    extends:      file: base/peer-base.yaml      service: orderer-base    container_name: orderer2.example.com    networks:      - byfn    volumes:      - ./channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block      - ./crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/msp:/var/hyperledger/orderer/msp      - ./crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/:/var/hyperledger/orderer/tls      - orderer2.example.com:/var/hyperledger/production/orderer    ports:      - 9050:7050    extra_hosts:      - orderer0.example.com:192.168.9.108      - orderer1.example.com:192.168.9.17      - orderer2.example.com:192.168.9.117      - peer0.org1.example.com:192.168.9.105      - peer1.org1.example.com:192.168.9.13      - peer0.org2.example.com:192.168.9.55      - peer1.org2.example.com:192.168.9.88  peer0.org1.example.com:    container_name: peer0.org1.example.com    extends:      file:  base/docker-compose-base.yaml      service: peer0.org1.example.com    networks:      - byfn    extra_hosts:      - orderer0.example.com:192.168.9.108      - orderer1.example.com:192.168.9.17      - orderer2.example.com:192.168.9.117      - peer0.org1.example.com:192.168.9.105      - peer1.org1.example.com:192.168.9.13      - peer0.org2.example.com:192.168.9.55      - peer1.org2.example.com:192.168.9.88  peer1.org1.example.com:    container_name: peer1.org1.example.com    extends:      file:  base/docker-compose-base.yaml      service: peer1.org1.example.com    networks:      - byfn    extra_hosts:      - orderer0.example.com:192.168.9.108      - orderer1.example.com:192.168.9.17      - orderer2.example.com:192.168.9.117      - peer0.org1.example.com:192.168.9.105      - peer1.org1.example.com:192.168.9.13      - peer0.org2.example.com:192.168.9.55      - peer1.org2.example.com:192.168.9.88peer0.org2.example.com:    container_name: peer0.org2.example.com    extends:      file:  base/docker-compose-base.yaml      service: peer0.org2.example.com    networks:      - byfn    extra_hosts:      - orderer0.example.com:192.168.9.108      - orderer1.example.com:192.168.9.17      - orderer2.example.com:192.168.9.117      - peer0.org1.example.com:192.168.9.105      - peer1.org1.example.com:192.168.9.13      - peer0.org2.example.com:192.168.9.55      - peer1.org2.example.com:192.168.9.88peer1.org2.example.com:    container_name: peer1.org2.example.com    extends:      file:  base/docker-compose-base.yaml      service: peer1.org2.example.com    networks:      - byfn    extra_hosts:      - orderer0.example.com:192.168.9.108      - orderer1.example.com:192.168.9.17      - orderer2.example.com:192.168.9.117      - peer0.org1.example.com:192.168.9.105      - peer1.org1.example.com:192.168.9.13      - peer0.org2.example.com:192.168.9.55      - peer1.org2.example.com:192.168.9.88  cli:    container_name: cli    image: 192.168.9.8:80/fabric1.4performance/hyperledger/fabric-tools:sles12sp3-latest    tty: true    stdin_open: true    environment:      - GOPATH=/opt/gopath      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock      #- FABRIC_LOGGING_SPEC=DEBUG      - FABRIC_LOGGING_SPEC=INFO      #- CORE_PEER_BCCSP_DEFAULT=GM      - CORE_PEER_BCCSP_DEFAULT=SW      - CORE_PEER_ID=cli      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051      - CORE_PEER_LOCALMSPID=Org1MSP      - CORE_PEER_TLS_ENABLED=true      - CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt      - CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key      - CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer    command: /bin/bash    volumes:      - /var/run/:/host/var/run/      - ./../chaincode/:/opt/gopath/src/github.com/chaincode      - ./../unionbank/:/opt/gopath/src/unionbank      - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/      - ./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/      - ./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts    extra_hosts:      - orderer0.example.com:192.168.9.108      - orderer1.example.com:192.168.9.17      - orderer2.example.com:192.168.9.117      - peer0.org1.example.com:192.168.9.105      - peer1.org1.example.com:192.168.9.13      - peer0.org2.example.com:192.168.9.55      - peer1.org2.example.com:192.168.9.88    networks:      - byfn</code></pre>]]></content>
      
      
      <categories>
          
          <category> fabric </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fabric部署 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
